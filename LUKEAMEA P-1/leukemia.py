# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'leukemia.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import numpy as np
from keras.preprocessing import image
from keras.models import Sequential
from keras.layers import Dense
from keras.models import model_from_json
import os
import cv2
import pandas as pd


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1081, 593)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(520, 30, 391, 31))
        self.label.setObjectName("label")
        self.IMAGESHOW = QtWidgets.QLabel(self.centralwidget)
        self.IMAGESHOW.setGeometry(QtCore.QRect(540, 100, 241, 151))
        self.IMAGESHOW.setFrameShape(QtWidgets.QFrame.Box)
        self.IMAGESHOW.setText("")
        self.IMAGESHOW.setObjectName("IMAGESHOW")
        self.SELECTIMAGE = QtWidgets.QPushButton(self.centralwidget)
        self.SELECTIMAGE.setGeometry(QtCore.QRect(520, 290, 111, 31))
        self.SELECTIMAGE.setObjectName("SELECTIMAGE")
        self.CLASSIFY = QtWidgets.QPushButton(self.centralwidget)
        self.CLASSIFY.setGeometry(QtCore.QRect(690, 290, 111, 31))
        self.CLASSIFY.setObjectName("CLASSIFY")
        self.PREDICTION = QtWidgets.QLabel(self.centralwidget)
        self.PREDICTION.setGeometry(QtCore.QRect(530, 360, 91, 21))
        self.PREDICTION.setObjectName("PREDICTION")
        self.PREDICT_OUTPUT = QtWidgets.QLabel(self.centralwidget)
        self.PREDICT_OUTPUT.setGeometry(QtCore.QRect(670, 350, 151, 31))
        self.PREDICT_OUTPUT.setFrameShape(QtWidgets.QFrame.Box)
        self.PREDICT_OUTPUT.setText("")
        self.PREDICT_OUTPUT.setObjectName("PREDICT_OUTPUT")
        self.PERCENTAGE = QtWidgets.QLabel(self.centralwidget)
        self.PERCENTAGE.setGeometry(QtCore.QRect(530, 420, 91, 21))
        self.PERCENTAGE.setObjectName("PERCENTAGE")
        self.PERCENTAGE_OUTPUT = QtWidgets.QLabel(self.centralwidget)
        self.PERCENTAGE_OUTPUT.setGeometry(QtCore.QRect(670, 410, 151, 31))
        self.PERCENTAGE_OUTPUT.setFrameShape(QtWidgets.QFrame.Box)
        self.PERCENTAGE_OUTPUT.setText("")
        self.PERCENTAGE_OUTPUT.setObjectName("PERCENTAGE_OUTPUT")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1081, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.SELECTIMAGE.clicked.connect(self.loadImage)
        self.CLASSIFY.clicked.connect(self.classifyFunction)

    def loadImage(self):
        fileName, _ = QtWidgets.QFileDialog.getOpenFileName(None, "Select Image", "", "Image Files (*.png *.jpg *jpeg *.bmp);;All Files (*)") # Ask for file
        if fileName: # If the user gives a file
            print(fileName)
            self.file=fileName
            pixmap = QtGui.QPixmap(fileName) # Setup pixmap with the provided image
            pixmap = pixmap.scaled(self.IMAGESHOW.width(), self.IMAGESHOW.height(), QtCore.Qt.KeepAspectRatio) # Scale pixmap
            self.IMAGESHOW.setPixmap(pixmap) # Set the pixmap onto the label
            self.IMAGESHOW.setAlignment(QtCore.Qt.AlignCenter) # Align the label to center


    def classifyFunction(self):        
        json_file = open('model.json', 'r')
        loaded_model_json = json_file.read()
        json_file.close()
        model = model_from_json(loaded_model_json)
        model.load_weights("model.h5")
        print("Loaded model from disk")
        try:
            path2=self.file
            test_image = image.load_img(path2, target_size = (512, 512))
            test_image = image.img_to_array(test_image)
            test_image = np.expand_dims(test_image, axis=0)
            result = model.predict(test_image)
        
            if result[0][0] == 1:
                prediction = 'LUKEAMEA'
                PREDICTION = prediction
                self.PREDICT_OUTPUT.setText(PREDICTION)
                img = cv2.imread(path2)
                dataset = pd.read_csv("leukemia.csv")
                print(dataset)
                x = dataset.iloc[:,:-1] #independent
                y = dataset.iloc[:,-1] #dependent 
                from sklearn.model_selection import train_test_split
                X_train, X_test, Y_train, Y_test = train_test_split(x,y, test_size=0.80, random_state=0)
                print(X_train)
                print(Y_train)
                print(X_test)
                print(Y_test)
                from sklearn.neighbors import KNeighborsClassifier
                classifier = KNeighborsClassifier(n_neighbors=5)
                classifier.fit(X_train, Y_train)
                Y_predict = classifier.predict(X_test)        
                img = cv2.resize(img,(400,400))
                #cv2.imshow("Original Frame",img)
                ## convert to hsv
                hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
                #cv2.imshow("hsv",hsv)
                ## mask of red (36,0,0) ~ (70, 255,255)
                mask1 = cv2.inRange(hsv, (0,0,100), (0,0,255)) #red
                #cv2.imshow("mask1",mask1)
                red= cv2.countNonZero(mask1)
                print("red = ",red)
                img = cv2.GaussianBlur(img,(5,5),2)
                im_gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
                ret,thresh = cv2.threshold(im_gray,127,255,0)
                count = cv2.countNonZero(thresh)
                #print(count)
                RED=((red+count)/2)*0.001000
                contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
                for contour in contours:
                    cv2.drawContours(im_gray, contours, -1, (0,255,0), 6)
                    #cv2.imshow("contour",im_gray)
                output = classifier.predict([[red]])
                print("Predicted New Output = ",output)
                if output == 1:
                    print("Affected")
                RED=int(RED)
                if RED <11:
                    RED= int(RED)
                PERCENTAGE=str(RED)
                self.PERCENTAGE_OUTPUT.setText(PERCENTAGE)
            else:
                prediction = 'No LUKEAMEA'
                PREDICTION = prediction
                self.PREDICT_OUTPUT.setText(PREDICTION)
        except Exception as e:
            print(e)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt; font-weight:600;\">LEUKEMIA DETECTION USING DEEP LEARNING</span></p></body></html>"))
        self.SELECTIMAGE.setText(_translate("MainWindow", "SELECT IMAGE"))
        self.CLASSIFY.setText(_translate("MainWindow", "CLASSIFY"))
        self.PREDICTION.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt; font-weight:600;\">PREDICTION</span></p></body></html>"))
        self.PERCENTAGE.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt; font-weight:600;\">PERCENTAGE</span></p><p><br/></p></body></html>"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
